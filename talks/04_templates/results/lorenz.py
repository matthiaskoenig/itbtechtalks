"""
Autogenerated ODE definition.

    model: lorenz
"""
import numpy as np
import pandas as pd


# -------------------
# ids
# -------------------
xids = ["x", "y", "z", ]
pids = ["r", "b", "sigma", ]
yids = []

# -------------------
# initial conditions
# -------------------
x0 = np.array([
    1.0,     # [0] x
    1.0,     # [1] y
    1.0,     # [2] z
])

# -------------------
# parameters
# -------------------
p = np.array([
    45.92,     # [0] r
    4.0,     # [1] b
    16.0,     # [2] sigma
])


def f_dxdt(x, t, p):
    """ ODE system """
    r = 45.92      # [0] r
    b = 4.0      # [1] b
    sigma = 16.0      # [2] sigma


    # ode
    return [
        sigma * (x[1] - x[0]),       # [0] x
        x[0] * (r - x[2]) - x[1],       # [1] y
        x[0] * x[1] - b * x[2],       # [2] z
    ]


def f_y(x, t, p):
    """ Calculate y.
    :param x:
    :param t:
    :param p:
    :return:
    """


    # --------------------------------------

    y = np.empty(shape=(0))

    return y


def f_z(X, T, p):
    """ DataFrame of full timecourse of solution. """
    (Nt, Nx) = X.shape
    Ny = len(yids)
    Nz = 1 + Nx + Ny
    columns = ["time"] + xids + yids
    Z = np.empty(shape=(Nt, Nz))
    Z[:,0] = T
    Z[:,1:(Nx+1)] = X
    for kt in range(Nt):
        y = f_y(x=X[kt, :], t=T[kt], p=p)
        Z[kt, (Nx+1):] = y

    Z = pd.DataFrame(Z, columns = columns)
    return Z