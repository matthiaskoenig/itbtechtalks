library(dMod)
library(stringr) # Um bequem mit strings zu arbeiten
library(tidyverse) # Viele Funktionen, u.a. für data.frames und ggplot2 für schöne plots
library(magrittr) # der Pipe-operator %>%: z.B: x =" a; y="f(x); z="g(y); wird zu z=" a %>% f %>% g
library(conveniencefunctions)
merge_col2_into_col1 <- function(.data, col1, col2) {
c1 <- enquo(col1)
c2 <- enquo(col2)
c1name <- quo_name(c1)
c2name <- quo_name(c1)
UQ <- rlang::UQ
mutate(.data, UQ(c1name) := replace(UQ(c1), is.na(UQ(c1)), UQ(c2)[is.na(UQ(c1))])) %>%
select(-UQ(c2))
}
load("2018_03_09_17_17_workspace.rda")
for(i in lsdMod(classlist = "prdfn")) {loadDLL(i)}
source("../model/limax_pkpd_39.R")
pars_raw <- c(x0, p)
pars_in_dxdtdmod <- c(getSymbols(dxdt_dmod), names(dxdt_dmod))
free_pars_apap <- c("Ka_apap", "APAPD_HLM_CL", "APAPD_Km_apap")
odemodel_apap <- odemodel(dxdt_dmod, modelname = "odemodel_apap", fixed = setdiff(pars_in_dxdtdmod, c(free_pars_apap, "Aar_apap"))) # Aar_apap is not there to be optimized, but a variable which is a state is needed because of a bug in odemodel.
x_apap <- Xs(odemodel_apap)
free_pars_apap_doses <- c(free_pars_apap, "PODOSE_apap", "IVDOSE_apap")
odemodel_apap_doses <- odemodel(dxdt_dmod, modelname = "odemodel_apap_doses", fixed = setdiff(pars_in_dxdtdmod, c(free_pars_apap_doses, "Aar_apap"))) # Aar_apap is not there to be optimized, but a variable which is a state is needed because of a bug in odemodel.
x_apap_doses <- Xs(odemodel_apap_doses)
free_pars_bic <- c("Ka_co2c13", "KLU_EXCO2", "CO2FIX_HLM_CL", "KBO_FIXCO2", "KBO_RELCO2", "KBO_MAXCO2")
odemodel_bic <- odemodel(dxdt_dmod, modelname = "odemodel_bic", fixed = setdiff(pars_in_dxdtdmod, c(free_pars_bic, "Aar_apap"))) # Aar_apap is not there to be optimized, but a variable which is a state is needed because of a bug in odemodel.
x_bic <- Xs(odemodel_bic)
free_pars_met <- c("Ka_metc13", "CYP1A2MET_CL", "CYP1A2MET_Km_met")
odemodel_met <- odemodel(dxdt_dmod, modelname = "odemodel_met", fixed = setdiff(pars_in_dxdtdmod, c(free_pars_met, "Aar_apap"))) # Aar_apap is not there to be optimized, but a variable which is a state is needed because of a bug in odemodel.
x_met <- Xs(odemodel_met)
knitr::opts_chunk$set(eval = FALSE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.height = 10)
knitr::opts_chunk$set(fig.width = 15)
library(dMod)
library(stringr) # Um bequem mit strings zu arbeiten
library(tidyverse) # Viele Funktionen, u.a. für data.frames und ggplot2 für schöne plots
library(magrittr) # der Pipe-operator %>%: z.B: x =" a; y="f(x); z="g(y); wird zu z=" a %>% f %>% g
library(conveniencefunctions)
merge_col2_into_col1 <- function(.data, col1, col2) {
c1 <- enquo(col1)
c2 <- enquo(col2)
c1name <- quo_name(c1)
c2name <- quo_name(c1)
UQ <- rlang::UQ
mutate(.data, UQ(c1name) := replace(UQ(c1), is.na(UQ(c1)), UQ(c2)[is.na(UQ(c1))])) %>%
select(-UQ(c2))
}
load("2018_03_09_17_17_workspace.rda")
for(i in lsdMod(classlist = "prdfn")) {loadDLL(i)}
source("../model/limax_pkpd_39.R")
pars_raw <- c(x0, p)
pars_in_dxdtdmod <- c(getSymbols(dxdt_dmod), names(dxdt_dmod))
free_pars_apap <- c("Ka_apap", "APAPD_HLM_CL", "APAPD_Km_apap")
odemodel_apap <- odemodel(dxdt_dmod, modelname = "odemodel_apap", fixed = setdiff(pars_in_dxdtdmod, c(free_pars_apap, "Aar_apap"))) # Aar_apap is not there to be optimized, but a variable which is a state is needed because of a bug in odemodel.
x_apap <- Xs(odemodel_apap)
free_pars_apap_doses <- c(free_pars_apap, "PODOSE_apap", "IVDOSE_apap")
odemodel_apap_doses <- odemodel(dxdt_dmod, modelname = "odemodel_apap_doses", fixed = setdiff(pars_in_dxdtdmod, c(free_pars_apap_doses, "Aar_apap"))) # Aar_apap is not there to be optimized, but a variable which is a state is needed because of a bug in odemodel.
x_apap_doses <- Xs(odemodel_apap_doses)
free_pars_bic <- c("Ka_co2c13", "KLU_EXCO2", "CO2FIX_HLM_CL", "KBO_FIXCO2", "KBO_RELCO2", "KBO_MAXCO2")
odemodel_bic <- odemodel(dxdt_dmod, modelname = "odemodel_bic", fixed = setdiff(pars_in_dxdtdmod, c(free_pars_bic, "Aar_apap"))) # Aar_apap is not there to be optimized, but a variable which is a state is needed because of a bug in odemodel.
x_bic <- Xs(odemodel_bic)
free_pars_met <- c("Ka_metc13", "CYP1A2MET_CL", "CYP1A2MET_Km_met")
odemodel_met <- odemodel(dxdt_dmod, modelname = "odemodel_met", fixed = setdiff(pars_in_dxdtdmod, c(free_pars_met, "Aar_apap"))) # Aar_apap is not there to be optimized, but a variable which is a state is needed because of a bug in odemodel.
x_met <- Xs(odemodel_met)
free_pars_apap_bic_met <- c(free_pars_apap_doses, free_pars_bic, free_pars_met) %>% unique
odemodel_apap_bic_met <- odemodel(dxdt_dmod, modelname = "odemodel_apap_bic_met", fixed = setdiff(pars_in_dxdtdmod, c(free_pars_apap_bic_met, "Aar_apap"))) # Aar_apap is not there to be optimized, but a variable which is a state is needed because of a bug in odemodel.
x_apap_bic_met <- Xs(odemodel_apap_bic_met)
observables_apap <- y_dmod[c("Mve_apap", "DOB")] %>% set_names(c("apap", "dob_apap"))
g_apap <- Y(observables_apap, x_apap)
recovery_bic <- paste(y_dmod["Exhalation_co2c13"], "/ 60 *", y_dmod["Mre_co2c13"], "/ Ri_co2c13 * 100")
observables_bic <- c(recovery_bic, y_dmod[c("DOB", "P_CO2Fc13")])
names(observables_bic) <- c("recovery_bic", "dob_bic", "co2_ratio_bic")
g_bic <- Y(observables_bic, x_bic)
recovery_met <- paste(y_dmod["Exhalation_co2c13"], "/ init_PODOSE_metc13 * Mr_metc13 * 100" )
cum_met <- paste( "Abreath_co2c13/ init_PODOSE_metc13 * Mr_metc13 * 100")
observables_met <- c(recovery_met, cum_met) %>% set_names(c("recovery_met", "cum_met"))
g_met <- Y(observables_met, x_met)
observables <- c(observables_apap, observables_bic, observables_met)
g <- Y(observables_apap_bic_met, x_apap_bic_met)
files_apap <- file.path("../data/paracetamol/", list.files("../data/paracetamol/", pattern = ".csv", recursive = T))
data_apap <- lapply(files_apap, . %>% read_tsv) %>% do.call(dMod::combine,.)
data_apap <- data_apap %>%
mutate(apap_se = apap_sd/sqrt(n)) %>%
mutate(name = "apap") %>%
mutate(dose = replace(dose, is.na(dose), "")) %>%
mutate(route = replace(route, is.na(route), "")) %>%
mutate(application = replace(application, str_detect(application, "capsule"), "capsule"),
application = replace(application, is.na(application), "")) %>%
select(study, application, route, dose, n, name, time, value = apap, sigma = apap_se) %>% # keep only necessary columns
filter(!is.na(value)) %>%
fitErrorModel( factors = c("study", "application", "route", "dose"), plotting = F) %>%
select(-n) %>%
mutate(dose = as.numeric(dose))
doses_apap <- data.frame(unique(data_apap[c("study", "application", "route", "dose")])[-4] %>% as.list,
dose = c(650, 650, 1500,5600,1400,1000,1000,2000,500),
dosepar = c(rep("PODOSE_apap", 5), "IVDOSE_apap", rep("PODOSE_apap", 3)),
BW = c(68,68, 68,73,68,75,75,75,75), stringsAsFactors = F)
data_apap <- rbind(left_join(data_apap %>% select(-dose), doses_apap) %>% filter(!str_detect(study, "Rawlins1977")),
right_join(data_apap, doses_apap) %>% filter(!is.na(value))) %>%
select(-route) %>%
rename(group = application)
files_bic <- file.path("../data/bicarbonate", list.files("../data/bicarbonate/", pattern = ".csv", recursive = T))
data_bic <- lapply(files_bic, function(filename) filename %>% read_tsv %>% mutate(study = filename)) %>% do.call(dMod::combine,.) # some had missing col "study", get the study col from the filename
data_bic <-
data_bic %>%
mutate(study = str_replace_all(study, c("../data/bicarbonate/" = "", "\\.csv" = "", "_.*$" = ""))) %>% # clean the "study"-col
mutate(time = replace(time,
study %in% c("Barstow1990", "Irving1983", "Meineke1993"),
time[study %in% c("Barstow1990", "Irving1983", "Meineke1993")]/60)) %>%  # Convert minutes into hours
gather("name", "value", dob, co2_production, co2_ratio, recovery) %>% # convert to long format with cols value and sigma
gather("name2", "sigma", dob_sd, co2_production_sd, recovery_sd) %>%
{df <- .;
df2 <- df %>% mutate(name2 = "co2_ratio_sd", sigma = NA)
rbind(df,df2)
} %>%
mutate(name2 = str_replace(name2, "_sd", "")) %>%
filter(name == name2) %>%
filter(!(is.na(value)&is.na(sigma))) %>%
unique() %>%
select(-name2, -exercise, -period, -recovery_pm_sd, -trial) %>% # only keep necessary covariates
mutate(sigma = sigma/sqrt(n)) %>% # convert sd to se
select(-n) %>%
rename(group = label) %>%
filter(!(name %in% "co2_production")) %>%
mutate(name = paste0(name, "_bic")) %>%
{.}
doses_bic <-
as.tibble(unique(data_bic[c("study","dose")])) %>% arrange(study, dose) %>%
cbind(dose2 = c(73, 0.79,46.5, 1.0, 12.5,25,50,100,16.54),
dosepar = c("IVDOSE_co2c13", "Ri_co2c13", "IVDOSE_co2c13", "Ri_co2c13", rep("PODOSE_co2c13", 4), "IVDOSE_co2c13"), stringsAsFactors = F) %>%
select(-dose) %>%
rename(dose = dose2) %>%
mutate(BW = c(75,75,75,75,75,75,75,75, 81.3))
# insert doses into data_bic
studies_to_insert_doses <- data_bic$study[is.na(data_bic$dose)] %>% unique
for (i in studies_to_insert_doses) {
data_bic$dose[data_bic$study == i] <- doses_bic$dose[doses_bic$study == i]
}
data_bic <- full_join(data_bic, doses_bic)
files_met <- file.path("../data/methacetin", list.files("../data/methacetin/", pattern = ".csv", recursive = T))
data_met <- lapply(files_met, function(filename) filename %>% read_tsv %>% mutate(study = filename)) %>% do.call(dMod::combine,.) # some had missing col "study", get the study col from the filename
data_met <-
data_met %>%
mutate(study = str_replace_all(study, c("../data/methacetin/" = "", "\\.csv" = "", "_.*$" = ""))) %>% # clean the "study"-col
merge_col2_into_col1(group, intervention) %>%
merge_col2_into_col1(n, subjects) %>%
mutate(group = replace(group, !is.na(pid), pid[!is.na(pid)])) %>% # Affects Krumbiegel: Patient id can be identified by group, since both patients were healthy
rename(dosing_strategy = dose) %>%
# group_by(study) %>% summarise(tmax = max(time)) # all of them appear to time given in minutes
mutate(time = time/60) %>%
select(-recovery_pm_se, -recovery_sd, -cum_sd, -cum_pm_se, -pid) %>% # only keep necessary covariates/variables
gather("name", "value", cum, recovery) %>%   # not the tidiest solution, but it works
gather("name2", "sigma", cum_se, recovery_se) %>%
mutate(name2 = str_replace(name2, "_se", "")) %>%
filter(name == name2) %>%
filter(!(is.na(value)&is.na(sigma))) %>%
unique() %>%
select(-name2, -n) %>%
mutate(name = paste0(name, "_met")) %>%
mutate(BW = 75) %>%
{.}
doses_met <-
as.tibble(unique(data_met[c("study")])) %>% arrange(study) %>%
cbind(dose = c(75, 150,75,75,75,375,75),
dosepar = c("PODOSE_metc13", "PODOSE_metc13", "PODOSE_metc13", "PODOSE_metc13", "PODOSE_metc13","PODOSE_metc13", "PODOSE_metc13"), stringsAsFactors = F)
data_met <- full_join(data_met, doses_met)
data <- dMod::combine(data_apap, data_bic, data_met) %>% replace_na(list(group = "", dosing_strategy = ""))
data_apap <- filter(data, str_detect(dosepar, "apap"))
dosepars_apap <- data$dosepar %>% unique
outer_pars_apap <- sort(c(dosepars_apap, free_pars_apap))
trafo_apap <-
pars_raw %>%
sort_by_name() %>%
replace((names(.) %in% outer_pars_apap), outer_pars_apap) %>%
branch(data_apap %>% as.datalist() %>% covariates()) %>%
define("dosepar~dose", dosepar = dosepar, dose = dose) %>% # insert values for the doses
insert("remainingdosepar~0", remainingdosepar = dosepars_apap) %>%
define("BW~bodyweight", bodyweight = BW) %>% # insert body weights
insert("x~exp(X)", x = free_pars_apap, X = toupper(free_pars_apap)) # backtrafo to linear pars from log-pars
p_apap <- P(trafo_apap)
pars_apap <- log(pars_raw[free_pars_apap]) %>% set_names(toupper(free_pars_apap))
# loadDLL(x_apap)
times <- seq(0,24, 0.1)
plotCombined((g_apap*x_apap*p_apap)(times, pars_apap, deriv = F), data = data_apap %>% as.datalist(), name %in% names(observables_apap))
dosepars_apap <- data$dosepar %>% unique
outer_pars_apap <- sort(c(dosepars_apap, free_pars_apap))
trafo_apap_free_ka <-
pars_raw %>%
sort_by_name() %>%
replace((names(.) %in% outer_pars_apap), outer_pars_apap) %>%
branch(data_apap %>% as.datalist() %>% covariates()) %>%
define("dosepar~dose", dosepar = dosepar, dose = dose) %>% # insert values for the doses
insert("remainingdosepar~0", remainingdosepar = dosepars_apap) %>%
define("BW~bodyweight", bodyweight = BW) %>% # insert body weights
insert("x~x_study_group", x = "Ka_apap", study = study, group = group) %>%
# insert("x~exp(X)", x = free_pars_apap, X = toupper(free_pars_apap))
insert("x~exp(X)",
x = getSymbols(mytrafo[[i]]),
X = toupper(getSymbols(mytrafo[[i]])))  # hacking insert()...
p_apap_free_ka <- P(trafo_apap_free_ka)
pars_apap_free_ka <- getParameters(p_apap_free_ka) %>% are_names_of(0)
data_bic <- data %>% filter(str_detect(dosepar, "co2c13"))
studies_with_sigma_na <- data_bic %>% filter(is.na(sigma)) %>% .[["study"]] %>% unique
data_bic_sigma_NA <- data_bic %>% filter(study %in% studies_with_sigma_na)
data_bic <- data_bic %>% filter(! study %in% studies_with_sigma_na)
errors_bic_sigma_NA <- paste0("s0_", names(observables_bic), " + srel_", names(observables_bic), " * ", names(observables_bic)) %>% set_names(names(observables_bic))
e_bic_sigma_NA <- Y(g = errors_bic_sigma_NA, f= (g_bic*x_bic))
dosepars_bic <- doses_bic$dosepar %>% unique
outer_pars_bic <- sort(c(dosepars_bic, free_pars_bic))
trafo_bic<-
c(pars_raw) %>%
sort_by_name() %>%
replace((names(.) %in% outer_pars_bic), outer_pars_bic) %>%
branch(data_bic %>% as.datalist() %>% covariates()) %>% # The table of covariates includes dosepar and dose, which are used in the next line
define("dosepar~dose", dosepar = dosepar, dose = dose) %>% #insert values for the doses
insert("remainingdosepar~0", remainingdosepar = dosepars_bic) %>%
insert("x~exp(X)", x = getSymbols(mytrafo[[i]]), X = toupper(getSymbols(mytrafo[[i]])))
p_bic <- P(trafo_bic)
pars_bic <- getParameters(p_bic) %>% are_names_of(0)
pars_errors_bic_sigma_NA <- getSymbols(errors_bic_sigma_NA) %>% str_subset("^s") %>% are_names_of(1)
dosepars_bic <- doses_bic$dosepar %>% unique
outer_pars_bic <- sort(c(dosepars_bic, free_pars_bic, names(pars_errors_bic_sigma_NA)))
# trafo_bic_sigma_NA <-
c(pars_raw, pars_errors_bic_sigma_NA) %>%
sort_by_name() %>%
replace((names(.) %in% outer_pars_bic), outer_pars_bic) %>%
branch(data_bic_sigma_NA %>% as.datalist() %>% covariates()) %>% # The table of covariates includes dosepar and dose, which are used in the next line
define("dosepar~dose", dosepar = dosepar, dose = dose) %>% # insert values for the doses
insert("remainingdosepar~0", remainingdosepar = dosepars_bic) %>%
insert("s~s_study", s = names(pars_errors_bic_sigma_NA), study = study) %>%
insert("x~exp(X)", x = getSymbols(mytrafo[[i]]), X = toupper(getSymbols(mytrafo[[i]])))
p_bic_sigma_NA <- P(trafo_bic_sigma_NA)
pars_bic_sigma_NA <- getParameters(p_bic_sigma_NA) %>% are_names_of(0)
# p_bic_sigma_NA(pars_bic_sigma_NA)
loadDLL(x_bic)
(g_bic*x_bic*p_bic_sigma_NA)(times*10, pars_bic_sigma_NA, deriv = F) %>%  plotPrediction(name %in% names(observables_bic))
(g_bic*x_bic*p_bic)(times*10, pars_bic, deriv = F) %>%
# lapply(. %>% as.tibble)
plotPrediction(name %in% names(observables_bic))
dosepars_bic
data_bic %>%
# filter(str_detect(name, "rec"))
filter(study %>% str_detect("Lei"))
observables_bic
(g_bic*x_bic*p_bic_sigma_NA)(times*10, pars_bic_sigma_NA, deriv = F)
pars_bic_sigma_NA
steadyStates
data
View(data)
cum_met
recovery_met
data %>% spread(dosepar, dose)
data_apap %>% as.datalist() %>% covariates()
data %>% spread(dosepar, dose) %>% write.csv("data.csv")
par(mfrow = c(1, 1))
rm(list=ls())
library(deSolve)
# ----------------------
# import odes
# ----------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./results/lorenz.R")
# ----------------------
# MBT (simulation)
# ----------------------
# desolve simulation
times <- seq(0, 20, by=0.01)
# ODE integration
X <- ode(y=x0, times=times, func=f_dxdt, parms=p)
# Solution Matrix
s = f_z(times, X, p)
png(filename="./results/lorenz_desolve.png", width=1200, height=1200)
# plot results
par(mfrow = c(2, 2))
plot(s[, 'time'], s[, 'x'],
main="desolve",
xlab='time',
ylab='value')
lines(s[, 'time'], s[, 'y'])
lines(s[, 'time'], s[, 'z'])
# plot results
plot(s[, 'x'], s[, 'y'],
main="desolve (y ~ x)",
xlab='value',
ylab='value')
plot(s[, 'x'], s[, 'z'],
main="desolve (z ~ x)",
xlab='value',
ylab='value')
plot(s[, 'y'], s[, 'z'],
main="desolve (z ~ y)",
xlab='value',
ylab='value')
dev.off()
par(mfrow = c(1, 1))
p(0)
p[0]
p[1]
rm(list=ls())
library(deSolve)
# ----------------------
# import odes
# ----------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./results/lorenz.R")
# ----------------------
# MBT (simulation)
# ----------------------
# desolve simulation
times <- seq(0, 20, by=0.01)
# ODE integration
X <- ode(y=x0, times=times, func=f_dxdt, parms=p)
# Solution Matrix
s = f_z(times, X, p)
png(filename="./results/lorenz_desolve.png", width=1200, height=1200)
# plot results
par(mfrow = c(2, 2))
plot(s[, 'time'], s[, 'x'],
main="desolve",
xlab='time',
ylab='value')
lines(s[, 'time'], s[, 'y'])
lines(s[, 'time'], s[, 'z'])
# plot results
plot(s[, 'x'], s[, 'y'],
main="desolve (y ~ x)",
xlab='value',
ylab='value')
plot(s[, 'x'], s[, 'z'],
main="desolve (z ~ x)",
xlab='value',
ylab='value')
plot(s[, 'y'], s[, 'z'],
main="desolve (z ~ y)",
xlab='value',
ylab='value')
dev.off()
par(mfrow = c(1, 1))
rm(list=ls())
library(deSolve)
# ----------------------
# import odes
# ----------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./results/lorenz.R")
# ----------------------
# MBT (simulation)
# ----------------------
# desolve simulation
times <- seq(0, 20, by=0.01)
# ODE integration
X <- ode(y=x0, times=times, func=f_dxdt, parms=p)
# Solution Matrix
s = f_z(times, X, p)
png(filename="./results/lorenz_desolve.png", width=1200, height=1200)
# plot results
par(mfrow = c(2, 2))
plot(s[, 'time'], s[, 'x'],
main="desolve",
xlab='time',
ylab='value')
lines(s[, 'time'], s[, 'y'])
lines(s[, 'time'], s[, 'z'])
# plot results
plot(s[, 'x'], s[, 'y'],
main="desolve (y ~ x)",
xlab='value',
ylab='value')
plot(s[, 'x'], s[, 'z'],
main="desolve (z ~ x)",
xlab='value',
ylab='value')
plot(s[, 'y'], s[, 'z'],
main="desolve (z ~ y)",
xlab='value',
ylab='value')
dev.off()
par(mfrow = c(1, 1))
rm(list=ls())
library(deSolve)
# ----------------------
# import odes
# ----------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./results/lorenz.R")
# ----------------------
# MBT (simulation)
# ----------------------
# desolve simulation
times <- seq(0, 20, by=0.01)
# ODE integration
X <- ode(y=x0, times=times, func=f_dxdt, parms=p)
# Solution Matrix
s = f_z(times, X, p)
X <- ode(y=x0, times=times, func=f_dxdt, parms=p)
View(f_dxdt)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./results/lorenz.R")
# ----------------------
# MBT (simulation)
# ----------------------
# desolve simulation
times <- seq(0, 20, by=0.01)
# ODE integration
X <- ode(y=x0, times=times, func=f_dxdt, parms=p)
s = f_z(times, X, p)
rm(list=ls())
library(deSolve)
# ----------------------
# import odes
# ----------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./results/lorenz.R")
# ----------------------
# MBT (simulation)
# ----------------------
# desolve simulation
times <- seq(0, 20, by=0.01)
# ODE integration
X <- ode(y=x0, times=times, func=f_dxdt, parms=p)
# Solution Matrix
s = f_z(times, X, p)
png(filename="./results/lorenz_desolve.png", width=1200, height=1200)
# plot results
par(mfrow = c(2, 2))
plot(s[, 'time'], s[, 'x'],
main="desolve",
xlab='time',
ylab='value')
lines(s[, 'time'], s[, 'y'])
lines(s[, 'time'], s[, 'z'])
# plot results
plot(s[, 'x'], s[, 'y'],
main="desolve (y ~ x)",
xlab='value',
ylab='value')
plot(s[, 'x'], s[, 'z'],
main="desolve (z ~ x)",
xlab='value',
ylab='value')
plot(s[, 'y'], s[, 'z'],
main="desolve (z ~ y)",
xlab='value',
ylab='value')
dev.off()
par(mfrow = c(1, 1))
png(filename="./results/lorenz_desolve.png", width=1200, height=1200)
# plot results
par(mfrow = c(2, 2))
plot(s[, 'time'], s[, 'x'], type="l",
main="desolve",
xlab='time',
ylab='value')
lines(s[, 'time'], s[, 'y'], type="l")
lines(s[, 'time'], s[, 'z'], type="l")
# plot results
plot(s[, 'x'], s[, 'y'], type="l",
main="desolve (y ~ x)",
xlab='value',
ylab='value')
plot(s[, 'x'], s[, 'z'], type="l",
main="desolve (z ~ x)",
xlab='value',
ylab='value')
plot(s[, 'y'], s[, 'z'], type="l",
main="desolve (z ~ y)",
xlab='value',
ylab='value')
dev.off()
par(mfrow = c(1, 1))
rm(list=ls())
library(deSolve)
# ----------------------
# import odes
# ----------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./results/lorenz.R")
# ----------------------
# MBT (simulation)
# ----------------------
# desolve simulation
times <- seq(0, 20, by=0.01)
# ODE integration
X <- ode(y=x0, times=times, func=f_dxdt, parms=p)
# Solution Matrix
s = f_z(times, X, p)
png(filename="./results/lorenz_desolve.png", width=1200, height=1200)
# plot results
par(mfrow = c(2, 2))
plot(s[, 'time'], s[, 'x'], type="l", ylim=c(-40, 80),
main="desolve",
xlab='time',
ylab='value')
lines(s[, 'time'], s[, 'y'], type="l")
lines(s[, 'time'], s[, 'z'], type="l")
# plot results
plot(s[, 'x'], s[, 'y'], type="l",
main="desolve (y ~ x)",
xlab='value',
ylab='value')
plot(s[, 'x'], s[, 'z'], type="l",
main="desolve (z ~ x)",
xlab='value',
ylab='value')
plot(s[, 'y'], s[, 'z'], type="l",
main="desolve (z ~ y)",
xlab='value',
ylab='value')
dev.off()
par(mfrow = c(1, 1))
